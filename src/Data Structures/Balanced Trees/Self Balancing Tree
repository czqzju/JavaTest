#https://www.hackerrank.com/challenges/self-balancing-tree/problem
	/* Class node is defined as :
    class Node 
    	int val;	//Value
    	int ht;		//Height
    	Node left;	//Left child
    	Node right;	//Right child

	*/
    
    static int getFactor(Node root)
    {
        int l_ht, r_ht;
        if(root.left != null) l_ht = root.left.ht;
        else l_ht = -1;
        if(root.right != null) r_ht = root.right.ht;
        else r_ht = -1;
        return l_ht - r_ht;
    }
    
    static void updateHeight(Node root)
    {
        if(root == null) return;
        int l_ht, r_ht;
        if(root.left != null){
            updateHeight(root.left);
            l_ht = root.left.ht;
        }
        else l_ht = -1;
        
        if(root.right != null){
            updateHeight(root.right);
            r_ht = root.right.ht;
        }
        else r_ht = -1;
        
        root.ht = l_ht > r_ht? l_ht + 1 : r_ht + 1;
    }

	static Node insert(Node root,int val)
    {
        int factor;
        Node tmpRoot, tmpLeft, tmpRight;
    	if(root == null){
            root = new Node();
            root.val = val;
            root.ht = 0;
            root.right = null;
            root.left = null;
            return root;
        }
        else if(val < root.val){
            root.left = insert(root.left, val);
            if(root.right != null){
                root.ht = root.left.ht > root.right.ht? root.left.ht + 1 : root.right.ht + 1;
            }
            else{
                root.ht = root.left.ht + 1;
            }
            factor = getFactor(root);
            if(factor == 2){
                if(getFactor(root.left) == -1){
                    tmpLeft = root.left;
                    root.left = tmpLeft.right;
                    tmpLeft.right = root.left.left;
                    root.left.left = tmpLeft;
                }
                tmpRoot = root.left;
                root.left = tmpRoot.right;
                tmpRoot.right = root;
                updateHeight(tmpRoot);
                return tmpRoot;               
            }
            else return root;
        }
        else{
            root.right = insert(root.right, val);
            if(root.left != null){
                root.ht = root.right.ht > root.left.ht? root.right.ht + 1 : root.left.ht + 1;
            }
            else{
                root.ht = root.right.ht + 1;
            }
            factor = getFactor(root);
            if(factor == -2){
                if(getFactor(root.right) == 1){
                    tmpRight = root.right;
                    root.right = tmpRight.left;
                    tmpRight.left = root.right.right;
                    root.right.right = tmpRight;
                }
                tmpRoot = root.right;
                root.right = tmpRoot.left;
                tmpRoot.left = root;
                updateHeight(tmpRoot);
                return tmpRoot;               
            }
            else return root; 
        } 
    }